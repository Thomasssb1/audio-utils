// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

/// from: com.thomasb.audio_utils.Command
class Command extends jni.JObject {
  @override
  late final jni.JObjType<Command> $type = type;

  Command.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"com/thomasb/audio_utils/Command");

  /// The type which includes information such as the signature of this class.
  static const type = $CommandType();
  static final _id_new0 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory Command() {
    return Command.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0, []).object);
  }

  static final _id_setArgs = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference, r"setArgs", r"([Ljava/lang/String;)V");

  /// from: static public void setArgs(java.lang.String[] args)
  static void setArgs(
    jni.JArray<jni.JString> args,
  ) {
    return jni.Jni.accessors.callStaticMethodWithArgs(_class.reference,
        _id_setArgs, jni.JniCallType.voidType, [args.reference]).check();
  }

  static final _id_parseArgs = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference, r"parseArgs", r"()Ljava/util/HashMap;");

  /// from: static public java.util.HashMap<java.lang.String,java.lang.String> parseArgs()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject parseArgs() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(_class.reference, _id_parseArgs,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_storeParsedArgs = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference, r"storeParsedArgs", r"(Ljava/util/HashMap;)V");

  /// from: static public void storeParsedArgs(java.util.HashMap<java.lang.String,java.lang.String> options)
  static void storeParsedArgs(
    jni.JObject options,
  ) {
    return jni.Jni.accessors.callStaticMethodWithArgs(
        _class.reference,
        _id_storeParsedArgs,
        jni.JniCallType.voidType,
        [options.reference]).check();
  }

  static final _id_getArg = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference, r"getArg", r"(Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String getArg(java.lang.String key)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString getArg(
    jni.JString key,
  ) {
    return const jni.JStringType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(_class.reference, _id_getArg,
            jni.JniCallType.objectType, [key.reference]).object);
  }
}

final class $CommandType extends jni.JObjType<Command> {
  const $CommandType();

  @override
  String get signature => r"Lcom/thomasb/audio_utils/Command;";

  @override
  Command fromRef(jni.JObjectPtr ref) => Command.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CommandType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CommandType) && other is $CommandType;
  }
}
